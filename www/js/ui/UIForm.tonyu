extends Base;
native $;
native parseInt;
\new(o) {
    super(o);
    inputable={"input":1,"textarea":1,"select":1};
    listeners=[];
    binds={};
    parallel("main");
}
\appendTo(dom) {
    parentJqdom=$(dom);
    if (jqdom) jqdom.appendTo(parentJqdom);
}
\dialog(options) {
    jqdom.dialog(options);
}
\clear() {
    jqdom.empty();
}
\tag() {
    var d=parseArray(arguments);
    if (d instanceof $) {
        (_jqdom||jqdom).append(d);
    }
    return d;
}
\change(elem,func) {
    var sv=_jqdom;
    _jqdom=elem;
    func();
    _jqdom=sv;
}
function parse(expr) {
    if (expr instanceof Array) return parseArray(expr);
    else if (typeof expr=="string") return parseString(expr);
    else if (isPlainFunction(expr)) return expr(_jqdom);
    else return expr;
}
\isPlainObject(o) {
    return (typeof o=="object" && 
        !(o instanceof Array) && 
        !(o instanceof $));
}
\isPlainFunction(f) {
    return (typeof f=="function") && Object.keys(f.prototype).length==0;
}
function parseArray(a) {
    var tag=a[0];
    var i=0;
    var svjq=_jqdom,res;
    if (typeof tag=="string") {
        res=_jqdom=$("<"+tag+">");
        if (!jqdom) {
            jqdom=_jqdom;
            if (parentJqdom) parentJqdom.append(jqdom);
        }
        i=1;
        if (isPlainObject(a[i])) {
            parseAttr(a[i]);
            i++;
        }
    } else if (typeof tag=="function" && tag.prototype.parseArray) {
        var params={parent:this, parentJqdom:_jqdom};
        i=1;
        if (isPlainObject(a[i])) {
            Tonyu.extend(params,a[i]);
            i++;
        }
        i=a.length;
        res=new tag(params);
    } else {
        print("Errortag",a);
        throw new Error("Invalid tag "+tag);
    }
    while (i<a.length) {
        var s=parse(a[i]);
        if (s) res.append(s);
        i++;
    }
    _jqdom=svjq;
    return res;
}
function parseAttr(o) {
    for (var k,v in o) {
        if (k=="on") {
            for (var eType,li in o.on) parseOn(eType,li);
        } else if (k=="name") {
            this[v]=_jqdom;
            _jqdom.attr(k,v);
        } else if (k=="css" && v!=null) {
            _jqdom.css(v);
        } else if (Util.startsWith(k,"$") ) {
            if (k=="$bind") {
                bind(v);
            }
        } else if (v!=null) {
            _jqdom.attr(k,v);
        }
    }
}
\isInputable(dom) {
    return inputable[dom[0].tagName.toLowerCase()];
}
function parseOn(eType, li) {
    var jqdom=_jqdom;
    if (!li) return;
    if (eType=="enterkey") {
        jqdom.on("keypress") \(ev) {
            if (ev.which==13) li.apply(jqdom,arguments);
        };  
    } else if (eType=="realtimechange") {
        if (!isInputable(jqdom)) return;
        var first=true, prev;
        if (!_listenersInvoked) {
            _listenersInvoked=true;
            parallel("listenerLoop");
        }
        listeners.push \() {
            var cur;
            if (jqdom.attr("type")=="checkbox") {
                cur=!!jqdom.prop("checked");
            } else {
                cur=jqdom.val();
            }
            if (first || prev!=cur) {
                li.apply(jqdom,[cur,prev]);
                prev=cur;
            }
            first=false;
        };
    } else {
        jqdom.on(eType, li);
    }
}
function parseString(str) {
    return str;//$("<span>").text(str);
}
\setVal(dom, val) {
    if (isInputable(dom)) dom.val(val);
    else dom.text(val);
}
\bind(key) {
    var jqdom=_jqdom;
    if (model) setVal(jqdom,model[key]);
    var vtype=modelType && modelType[key] || "string";
    var bindObj;
    bindObj=binds[key]|| {
        jqdoms:[],
        onModelChanged:\(val, from) {
            bindObj.jqdoms.forEach \(d) {
                if (from!==d) setVal(d,val);
            };
        }
    };
    binds[key]=bindObj;
    parseOn("realtimechange") \(val) {
        //print("bind-wrt",model,key,val,vtype,modelType);
        if (model) {
            if (vtype=="string") {
                model[key]=val;
            } else if(vtype="number") {
                model[key]=parseInt(val);
            }
            fireEvent("modelChanged") {key, value:model[key], from:jqdom};
            bindObj.onModelChanged(val,jqdom);
        }
    };
    bindObj.jqdoms.push(jqdom);
    /*binds[key]={
        onModelChanged:\(val) {
            jqdom.val(val);
        }
    };*/
}
\loadModel(m,def) {
    if (SFile["is"](m)) {
        modelFile=m;
        model=readJSON(modelFile,def);
    } else {
        model=m;
    }
    assert(model, "Model load error");
    for (var key,handler in binds) {
        handler.onModelChanged(model[key]);
    }
}
\saveModel() {
    if (modelFile && model) {
        writeJSON(modelFile,model) {indent:4};
        sendEvent("modelsaved",model);
    } else {
        throw new Error("Model is not loaded from file");
    }
}
\attr(key,val) {
    model[key]=val;
    if (binds[key]) binds[key].onModelChanged(val);
    fireEvent("modelChanged") {key, value:val};
}
\listenerLoop() {
    while(!isDead) {
        listeners.forEach\(f) {
            f();
        };
        update(100);
    }
}
\die() {
    _isDead=true;
    if (jqdom) {
        jqdom.remove();
    }
}