includes WaitMod;
native JSON;

nowait \cd(dir) {
    cwd=resolve(dir);
}
nowait \resolve(f) {
    if (SFile["is"](f)) return f;
    if (!cwd) throw new Error("CWD is not set");
    return cwd.rel(f);
}
\listFiles(dir) {
    dir=resolve(dir);
    var r=waitFor(dir.listFiles());
    return r;
}
\readJSON(file,def) {
    file=resolve(file);
    var e=waitFor(file.exists());
    if (!e) {
        if (arguments.length>=2) return def; 
    }
    var o=file.obj();
    var r=waitFor(o);
    print("rdjson",o,r);
    return r;
}
\readFile(file,def) {
    file=resolve(file);
    var e=waitFor(file.exists());
    if (!e) {
        if (arguments.length>=2) return def; 
    }
    var r=waitFor(file.text());
    return r;
}
\writeJSON(file,cont,options) {
    file=resolve(file);
    if (typeof cont=="string") { 
        JSON.parse(cont);
        writeFile(file,cont);
    } else if (typeof cont=="object") {
        if (options&&options.indent) {
            writeFile(file, JSON.stringify(cont,null,options.indent));
        } else {
            waitFor(file.obj(cont));
        }
    } else {
        throw new Error("Invalid content type:"+cont);
    }
}
\writeFile(file,cont) {
    file=resolve(file);
    if (typeof cont=="string") { 
        waitFor(file.text(cont));
    } else if (typeof cont=="object") {
        waitFor(file.obj(cont));
    } else {
        throw new Error("Invalid content type:"+cont);
    }
}
\mv(src,dst) {
    src=resolve(src);
    dst=resolve(dst);
    waitFor(dst.moveFrom(src));
}
\isDir(file) {
    file=resolve(file);
    var r=waitFor(file.isDir());
    return r;
}
\mkdir(file) {
    file=resolve(file);
    var r=waitFor(file.mkdir());
    return r;
}
\rm(file) {
    file=resolve(file);
    var r=waitFor(file.rm());
    return r;
}